{"version":3,"sources":["../../../utils/clamp.js","../../../utils/compose.js","utils.js","worker.js"],"names":["clamp","value","min","max","Math","compose","fns","params","slice","reduce","prev","fn","indexToCoordinate","index","options","scale","width","height","center","ratio","i","x0","y0","floor","x","y","dot","v1","v2","parseQuery","querystring","URLSearchParams","entries","acc","k","v","Object","assign","parseFloat","stringifyQuery","set","toString","updateQuery","url","URL","window","location","pathname","origin","search","history","pushState","createImageData","image","ImageData","data","length","r","g","b","a","calcIterations","limit","n","z","log2","map","domain","range","clamAndFloor","mapColor","fraction","stops","colors","f","marker","from","to","colorFrom","colorTo","calcColor","palette","cycleFraction","Number","unshift","pop","isFinite","STEPS","PALETTE","onmessage","result","point","iterations","postMessage"],"mappings":"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","file":"worker.a63f188b.js","sourceRoot":"../../src/sketches/mandelbrot/src","sourcesContent":["/**\n * Clamp value between two edges\n * @param {number} value\n * @param {number} min\n * @param {number} max\n * @returns\n */\nexport function clamp(value, min = 0, max = 1) {\n  return Math.min(Math.max(value, min), max);\n}\n","export function compose(...fns) {\n  return (params) => fns.slice(1).reduce((prev, fn) => fn(prev), fns[0](params));\n}\n","import { clamp } from '../../../utils/clamp';\nimport { compose } from '../../../utils/compose';\n\n/**\n * Transform index of image data to coordinate of plane\n * @param {number} index\n * @param {Object} options\n */\nexport function indexToCoordinate(index, options) {\n  const { scale, width, height, center, ratio } = options;\n\n  const i = index / 4;\n  const x0 = i % width;\n  const y0 = Math.floor(i / width);\n\n  const x = ((x0 * scale) / width - scale / 2 + center.x * ratio) / ratio;\n  const y = ((y0 * scale) / height - scale / 2) * -1 + center.y;\n\n  return { x, y };\n}\n\n/**\n * @typedef {Object} Dot\n * @property {number} x\n * @property {number} y\n *\n * Scalar product\n * @param {Dot} v1\n * @param {Dot} v2\n * @returns\n */\nexport function dot(v1, v2) {\n  return v1.x * v2.x + v1.y * v2.y;\n}\n\n/**\n *\n * @param {*} querystring\n * @returns\n */\nexport function parseQuery(querystring) {\n  const params = new URLSearchParams(querystring);\n  return [...params.entries()].reduce((acc, [k, v]) => Object.assign(acc, { [k]: parseFloat(v) }), {});\n}\n\n/**\n *\n * @param {*} params\n * @returns\n */\nexport function stringifyQuery(params = {}) {\n  return Object.entries(params)\n    .reduce((acc, [k, v]) => {\n      acc.set(k, v);\n      return acc;\n    }, new URLSearchParams())\n    .toString();\n}\n\nexport function updateQuery(params) {\n  const url = new URL(window.location.pathname, window.location.origin);\n  url.search = stringifyQuery(params);\n\n  window.history.pushState(null, '', url);\n}\n\n/**\n *\n * @param {*} options\n * @param {*} fn\n * @returns\n */\nexport function createImageData(options, fn) {\n  const { width, height } = options;\n  const image = new ImageData(width, height);\n\n  for (let i = 0; i < image.data.length; i += 4) {\n    const [r = 0, g = 0, b = 0, a = 0] = fn(i);\n\n    image.data[i] = r;\n    image.data[i + 1] = g;\n    image.data[i + 2] = b;\n    image.data[i + 3] = a;\n  }\n\n  return image;\n}\n\n/**\n *\n * @param {*} center\n * @param {*} limit\n * @returns\n */\nexport function calcIterations(center, limit) {\n  let n = 0;\n  const z = { x: 0, y: 0 };\n\n  for (let i = 0; i < limit; i += 1) {\n    const x = z.x * z.x - z.y * z.y + center.x;\n    const y = 2.0 * z.x * z.y + center.y;\n\n    z.x = x;\n    z.y = y;\n\n    if (dot(z, z) > 4) {\n      break;\n    }\n\n    n += 1;\n  }\n\n  return n - Math.log2(Math.log2(dot(z, z))) + 4;\n}\n\nfunction map(value, domain, range) {\n  return range[0] + ((range[1] - range[0]) * (value - domain[0])) / (domain[1] - domain[0]);\n}\n\nconst clamAndFloor = compose(Math.floor, (value) => clamp(value, 0, 255));\n\nfunction mapColor(fraction, stops, colors) {\n  const f = clamp(fraction, 0, 1);\n\n  let marker;\n  for (let i = 1; i < stops.length; i += 1) {\n    if (f < stops[i]) {\n      marker = i - 1;\n      break;\n    }\n  }\n\n  try {\n    if (marker != null) {\n      const from = stops[marker];\n      const to = stops[marker + 1];\n      const colorFrom = colors[marker];\n      const colorTo = colors[marker + 1];\n\n      const r = clamAndFloor(map(f, [from, to], [colorFrom[0], colorTo[0]]));\n      const g = clamAndFloor(map(f, [from, to], [colorFrom[1], colorTo[1]]));\n      const b = clamAndFloor(map(f, [from, to], [colorFrom[2], colorTo[2]]));\n      const a = clamAndFloor(map(f, [from, to], [colorFrom[3], colorTo[3]]));\n\n      return [r, g, b, a];\n    }\n  } catch {\n    /*  */\n  }\n\n  return null;\n}\n\nexport function calcColor(fraction, stops, palette, cycleFraction) {\n  const colors = palette.slice(0);\n  colors.unshift(colors.pop());\n\n  if (Number.isFinite(fraction) && fraction > 1 - cycleFraction) {\n    return calcColor((fraction + cycleFraction - 1) / cycleFraction, stops, colors, cycleFraction * cycleFraction);\n  }\n\n  return mapColor(fraction / (1 - cycleFraction), stops, palette);\n}\n","import { calcColor, calcIterations, createImageData, indexToCoordinate } from './utils';\n\nconst STEPS = [0, 0.2, 0.4, 0.6, 0.8, 1];\nconst PALETTE = [\n  [89, 14, 34, 255],\n  [12, 3, 68, 255],\n  [52, 137, 218, 255],\n  [255, 255, 255, 255],\n  [255, 210, 47, 255],\n  [174, 67, 13, 255],\n];\n\nonmessage = ({ data }) => {\n  const { width, height, x, y, scale, max } = data;\n  const ratio = height / width;\n\n  const result = createImageData({ width, height }, (index) => {\n    const point = indexToCoordinate(index, { scale, width, height, center: { x, y }, ratio });\n    const iterations = calcIterations(point, max);\n\n    return calcColor(iterations / max, STEPS, PALETTE, 0.7) || [0, 0, 0, 255];\n  });\n\n  postMessage(result);\n};\n"]}