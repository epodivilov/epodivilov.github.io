{"version":3,"sources":["utils.js","index.js"],"names":["debounce","callback","delay","timeout","args","clearTimeout","setTimeout","raf","fps","time","frame","_id","loop","timestamp","seg","Math","floor","requestAnimationFrame","cancelAnimationFrame","settings","canvas","document","getElementById","theme","window","matchMedia","matches","hue","saturation","lightness","circles","points","offset","speed","rays","initPane","options","pane","Tweakpane","title","expanded","addInput","Dark","Light","on","value","body","classList","add","remove","addSeparator","min","max","step","pathFabric","context","baseRadius","color","amplitude","beginPath","i","alpha","PI","radius","sin","x","cos","y","moveTo","lineTo","closePath","fillStyle","fill","initCanvas","getContext","draw","render","width","height","fillRect","resizeHandler","size","innerHeight","innerWidth","translate","addEventListener"],"mappings":"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","file":"src.531f2d85.js","sourceRoot":"../../src/sketches/mandala/src","sourcesContent":["/**\n * @param {Function} callback\n * @param {number} delay\n */\nexport function debounce(callback, delay) {\n  let timeout = null;\n\n  return (...args) => {\n    clearTimeout(timeout);\n\n    timeout = setTimeout(() => {\n      callback(...args);\n    }, delay);\n  };\n}\n\n/**\n * @param {Function} callback\n * @param {number} fps\n * @returns {Function} call to start/re-start\n */\nexport function raf(callback, fps = 60) {\n  let delay = 1000 / fps;\n  let time = null;\n  let frame = -1;\n  let _id = null;\n\n  /** @param {number} timestamp */\n  function loop(timestamp) {\n    if (time === null) {\n      time = timestamp;\n    }\n\n    const seg = Math.floor((timestamp - time) / delay);\n\n    if (seg > frame) {\n      frame = seg;\n      callback(timestamp);\n    }\n\n    _id = requestAnimationFrame(loop);\n  }\n\n  return () => {\n    if (_id != null) {\n      cancelAnimationFrame(_id);\n      _id = null;\n      time = null;\n      frame = -1;\n    }\n\n    loop(0);\n  };\n}\n","import { debounce, raf } from './utils';\n\nconst settings = {\n  canvas: document.getElementById('canvas'),\n  theme: window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light',\n  hue: 25,\n  saturation: 60,\n  lightness: 50,\n  circles: 17,\n  points: 500,\n  offset: 2,\n  speed: 1,\n  rays: 6,\n};\n\nfunction initPane(options) {\n  const pane = new Tweakpane({ title: 'Parameters', expanded: false });\n  pane.addInput(options, 'theme', { options: { Dark: 'dark', Light: 'light' } }).on('change', (value) => {\n    if (value === 'dark') {\n      document.body.classList.add('dark');\n      document.body.classList.remove('light');\n    } else {\n      document.body.classList.add('light');\n      document.body.classList.remove('dark');\n    }\n  });\n  pane.addSeparator();\n  pane.addInput(options, 'hue', { min: 0, max: 360, step: 1 });\n  pane.addInput(options, 'saturation', { min: 0, max: 100, step: 1 });\n  pane.addInput(options, 'lightness', { min: 0, max: 100, step: 1 });\n  pane.addSeparator();\n  pane.addInput(options, 'circles', { min: 1, step: 1 });\n  pane.addInput(options, 'points', { min: 3, step: 1 });\n  pane.addSeparator();\n  pane.addInput(options, 'offset', { min: 1, step: 1 });\n  pane.addInput(options, 'speed', { min: 0, step: 1 });\n  pane.addInput(options, 'rays', { min: 1, step: 1 });\n}\n\n/**\n * @param {CanvasRenderingContext2D} context\n * @param {Object} options\n */\nfunction pathFabric(context, options) {\n  /**\n   * @param {number} baseRadius\n   * @param {string} color\n   * @param {number} amplitude\n   * @param {number} offset\n   */\n  return function draw(baseRadius, color, amplitude, offset) {\n    const points = options.points;\n\n    context.beginPath();\n    for (let i = 0; i <= points; i++) {\n      const alpha = (i * Math.PI * 2) / points;\n      const radius = baseRadius + amplitude * Math.sin(alpha * options.rays + offset);\n      const x = radius * Math.cos(alpha);\n      const y = radius * Math.sin(alpha);\n\n      if (i === 0) {\n        context.moveTo(x, y);\n      } else {\n        context.lineTo(x, y);\n      }\n    }\n    context.closePath();\n\n    context.fillStyle = color;\n    context.fill();\n  };\n}\n\n/**\n * @param {Object} options\n * @param {HTMLCanvasElement} options.canvas\n * @param {'dark' | 'light'} options.theme\n * @param {number} options.hue\n * @param {number} options.saturation\n * @param {number} options.lightness\n * @param {number} options.circles\n * @param {number} options.points\n * @param {number} options.offset\n * @param {number} options.speed\n */\nfunction initCanvas(options) {\n  /** @type {CanvasRenderingContext2D} */\n  const context = options.canvas.getContext('2d');\n\n  const draw = pathFabric(context, options);\n\n  let hue = 0;\n  const render = raf((timestamp) => {\n    const { saturation, lightness, offset, speed, circles, theme } = options;\n\n    const { width, height } = context.canvas;\n\n    context.fillStyle = theme === 'dark' ? '#152028' : '#E9FCFF';\n    context.fillRect(-width / 2, -height / 2, width, height);\n\n    hue += 0.7;\n\n    for (let i = 0; i < circles; i++) {\n      const radius = (width * 0.30) - i * 10;\n      const color = `hsl(${hue + i * options.hue}, ${saturation}%, ${lightness}%)`;\n      const step = (i * Math.PI) / offset + 3 * (timestamp / (2000 / speed));\n      const amplitude = (width * 0.05) + 1.5 * (circles - i) * Math.sin(timestamp / (1000 / speed));\n\n      draw(radius, color, amplitude, step);\n    }\n  }, 24);\n\n  const resizeHandler = debounce(() => {\n    const size = Math.floor(Math.min(window.innerHeight, window.innerWidth) * 0.9);\n    options.canvas.width = size;\n    options.canvas.height = size;\n    context.translate(size / 2, size / 2);\n\n    render();\n  }, 500);\n\n  window.addEventListener('resize', resizeHandler);\n\n  resizeHandler();\n}\n\ninitPane(settings);\ninitCanvas(settings);\n"]}